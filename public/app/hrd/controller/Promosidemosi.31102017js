Ext.define('Hrd.controller.Promosidemosi', {
    extend: 'Hrd.library.box.controller.ControllerByData',
    alias: 'controller.Promosidemosi',
    requires: ['Hrd.library.box.tools.DefaultConfig', 'Hrd.library.box.tools.EventSelector',
        'Hrd.minic.lookup.Employee', 'Hrd.library.box.tools.ComboLoader', 'Hrd.library.box.tools.InstaView',
        'Hrd.library.box.tools.Hour'],
    views: [],
    comboBoxIdEl: [],
    controllerName: 'promosidemosi',
    formWidth: 600,
    refs: [
        {
            ref:'gridlookuppromosi',
            selector:'lookupemployeegrid'
        }
    ],
    //unitFormula: null,
    //storeProcess: 'Otherspaymentdatadetail',
    bindPrefixName: 'Promosidemosi',
    browseHandler: null,
    localStore: {
        selectedUnit: null,
    },
    textCombos: [],
    comboLoader: null,
    fieldName: 'changestatus_id',
    myParams: null,


    constructor: function(configs) {
        var me = this;
        var config = new Hrd.library.box.tools.DefaultConfig({
            moduleName: me.controllerName
        });
        config.run(this);

       

        this.callParent(arguments);
    },
    finalData:function(data){
        var me = this;
        var f = me.getFormdata();
        var vs = f.getForm().getValues();
        console.log(vs);
        data["change_mode"] = vs["change_mode"];
        return data;
    },

    init: function() {
        var me = this;
        this.callParent(arguments);
        var newEvs = {};
        var events = new Hrd.library.box.tools.EventSelector();

        //lookup_employee
        newEvs['promosidemosiformdata button[action=lookup_employee]'] = {
            click: function() {
                me.lookupEmployee();
            }

        };

       


        newEvs['#employeeTPromosiDewindow lookupemployeegrid button[action=select]'] = {
            click: function() {
                me.selectEmployee();
            }

        };



        this.control(newEvs);

    },
    
    
    selectEmployee: function() {
        var me = this;
        var f = me.getFormdata();
        var g = me.getGridlookuppromosi();
        var rec = g.getSelectedRecord();
        if (rec) {
            me.tools.fillEmployeeInfo(rec,f);
            g.up("window").close();
        }

    },
    lookupEmployee: function() {
        var me = this;

        var window = me.instantWindow("Panel", 600, "Employe List", "create", "employeeTPromosiDewindow", "lookup.employee", {
            itemId: me.controllerName + 'employee'
        });


        var g = window.down("grid");


        var p = window.down("panel");
        p.setLoading("Please wait...");
        me.tools.ajax({
            params: {},
            success: function(data, model) {
                me.tools.wesea({data: data, model: model}, g).grid();
                p.setLoading(false);
            }
        }).read('employee');



    },
    
    panelAfterRender: function(el) {
        var me = this;

        if (me.isMaximize) {
            el.up("window").maximize();
        }
        me.getGrid().getSelectionModel().setSelectionMode('SINGLE');

        var f = me.getFormdata();
        me.tools.ajax({
            params: {},
            success: function(data, model) {
       
               me.tools.wesea(data.group, f.down("[name=new_group_id]")).comboBox();
               me.tools.wesea(data.position, f.down("[name=new_position_id]")).comboBox();
            }
        }).read('parameter');

        me.getPanel().setLoading(false);

        // maximize panel window

    },
    
    validateData: function() {
        var me = this;
        var data = {"status": true, "msg": "Sedang diproses..."};

        return data;
    },

    
    afterClick: function() {
        var me = this;
        var f = me.getFormdata();
        var x = {
            cancel: function() {
                //  me.mainGridCheckRecord();
               // var rec = me.getGrid().getSelectedRecord();
               // if (rec) {
                //    f.loadRecord(rec);
                //}
            },
            save: function() {

            },
            edit: function() {

            },
            delete: function() {

            },
            new : function() {
               // me.validShift = false;
                f.getForm().reset();
              //  f.down("[name=date]").setValue(new Date());
            }
        }
        return x;
    }


});