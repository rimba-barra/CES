<?php

ini_set("memory_limit", "-1");
ini_set('max_execution_time', 0);

class Cashier_Models_VDApprove extends Zend_Db_Table_Abstract {

    private $setting = null;
    private $generaldata = null;
    private $_mail = null;
    private $_templatemsg = null;

    function init() {
        date_default_timezone_set('Asia/Jakarta');
        $this->_session = Zend_Controller_Action_HelperBroker::getStaticHelper('session');
        $this->_mail = Zend_Controller_Action_HelperBroker::getStaticHelper('Email');
        $this->_project_id = $this->_session->getCurrentProjectId();
        $this->_pt_id = $this->_session->getCurrentPtId();
        $this->_templatemsg = new Cashier_Helpers_Templatemail;
        $this->_user_id = $this->_session->getUserId();
        $this->_curdate = date('Y-m-d');
        $this->_curdatetime = date('Y-m-d H:i:s');
        $this->_time = date('H:i:s');

        $this->setting = new Cashier_Models_General_Setdata;
        $this->generaldata = new Cashier_Models_General_Generaldata;
        $this->setting->_storeprocedure = 'sp_th_voucher_approve';
    }

    function VDApproveRead($param) {
        $return['success'] = false;
        if (is_array($param) && count($param)) {
            try {
                $this->setting->_param = $param;
                $this->setting->_paramsql = 'read';
                $projectpt = $this->setting->setDefaultProjectPt($param);
                $param['project_id'] = $projectpt['project_id'];

                switch ($this->setting->_param['hideparam']) {
                    case 'default':
                        $resultemployee = $this->setting->getEmployeedata();
                        $this->setting->_pt_id = $param['pt_id'];
                        $this->setting->_param['department_id'] = $resultemployee['department_id'];
                        $this->setting->_storeprocedure = 'sp_th_voucher_approve';
                        $this->setting->_param['hideparam'] = 'default';
                        $this->setting->_param['start'] = 0;
                        $this->setting->_param['limit'] = 25;
                        $result = $this->setting->executeSP();
                        $counter = $result[1][0]['RECORD_TOTAL'];
                        if (!empty($result[1][0]['RECORD_TOTAL'])) {
                            $data = $result[2];
                        } else {
                            $data = null;
                        }
                        $message = null;
                        $valid = true;
                        break;
                    case 'search':
                        $this->setting->_pt_id = $param['pt_id'];
                        $result = $this->setting->executeSP();
                        $counter = $result[1][0]['RECORD_TOTAL'];
                        if (!empty($result[1][0]['RECORD_TOTAL'])) {
                            $data = $result[2];
                        } else {
                            $data = null;
                        }
                        $message = null;
                        $valid = true;
                        break;
                    case 'getdataonlyapprove':
                        $this->setting->_param['status'] = 2;
                        $result = $this->setting->executeSP();
                        $counter = $result[1][0]['RECORD_TOTAL'];
                        if (!empty($result[1][0]['RECORD_TOTAL'])) {
                            $data = $result[2];
                        } else {
                            $data = null;
                        }
                        $message = null;
                        $valid = true;
                        break;
                    case 'getemployee':
                        $resultemployee = $this->setting->getEmployeedata();
                        $employee_id = $department_id = $manager_id = 0;
                        if (!empty($resultemployee)) {
                            $employee_id = $resultemployee['employee_id'];
                            $department_id = $resultemployee['department_id'];
                            $manager_id = $resultemployee['manager_id'];
                        }
                        $data = array();
                        $data['employee_id'] = $employee_id;
                        $data['department_id'] = $department_id;
                        $data['manager_id'] = $manager_id;
                        $valid = true;
                        $counter = 0;
                        $message = null;
                        break;

                    default:
                        $resultemployee = $this->setting->getEmployeedata();
                        $employee_id = $department_id = $manager_id = 0;
                        if (!empty($resultemployee)) {
                            $employee_id = $resultemployee['employee_id'];
                            $department_id = $resultemployee['department_id'];
                            $manager_id = $resultemployee['manager_id'];
                        }
                        $data = array();
                        $data['employee_id'] = $employee_id;
                        $data['department_id'] = $department_id;
                        $data['manager_id'] = $manager_id;
                        $valid = true;
                        $counter = 0;
                        $message = null;
                }


                $return = array(
                    "success" => $valid,
                    "data" => $data,
                    "msg" => $message,
                    "total" => $counter,
                    "counter" => $counter,
                    "parameter" => $param['hideparam'],
                );
            } catch (Exception $e) {
                //var_dump($e);
            }
        }
        return $return;
    }

    public function sendmaildata($param) {
        $rowuser = $this->generaldata->getUserdatabyid($param['addby']);
        if ($rowuser !== null) {
            $rowemployeeuser = $this->generaldata->getEmployeebyId($rowuser['employee_id']);
            $rowemployee = $this->generaldata->getEmployeebyId($param['approveby_id']);
            $rowvoucher = $this->getdataVoucherbyid($param);
            $statusemail = $rowvoucher['approvemail'];
            if (!empty($rowemployee)) {
                $user_request = $rowemployeeuser['employee_name'];
                $email_user = $rowemployeeuser['email_ciputra'];
                $emailapproval = $rowemployee['email_ciputra'];
                $employeename = $rowemployee['employee_name'];

                if($this->_project_id==1 && $this->_pt_id==1){                   
		    $emailcc = array('agnes.putri@ciputra.com','deslie.dian@ciputra.co.id','erly@ciputra.com',$emailapproval);

                }else{
                    $emailcc = array($emailapproval);
                }
                
                if($param['hideparam']=='approve'){
                     $subject = ' VOUCHER DEPARTMENT HAS APPRPOVED FOR '.strtoupper($user_request);
                }else{
                    $subject = ' VOUCHER DEPARTMENT HAS UNAPPROVED FOR '.strtoupper($user_request);
                }		
                               
                $param['userrequest'] = $user_request;
                $param['approvename'] = $employeename;

		

                $message = $this->_templatemsg->htmlvoucherapprove($param);
                //$this->_mail->setData()->setFrom($emailapproval); //bermasalah klo di set ke $emailapproval
		$this->_mail->setData()->setFrom($this->_mail->emailuser);
                $this->_mail->setData()->setBodyHtml($message);
                $this->_mail->setData()->addTo($email_user, $user_request);
                $this->_mail->setData()->addCc($emailcc);
                $this->_mail->setData()->setSubject($subject);

		
               if ($this->_mail->setData()->send()) {
                    //echo 'succes send mail';
                    $this->updateStatusmail($param);
                } else {
                    //echo 'failed send mail';
                }
		

            }
        }
    }


    public function sendmaildata_old($param) {
        $rowuser = $this->generaldata->getUserdatabyid($param['addby']);
        if ($rowuser !== null) {
            $rowemployee = $this->generaldata->getEmployeebyId($rowuser['employee_id']);
            $rowvoucher = $this->getdataVoucherbyid($param);
            $statusemail = $rowvoucher['approvemail'];
            if (!empty($rowemployee)) {
                $emailapproval = $rowemployee['email'];
                $employeename = $rowemployee['employee_name'];
                $setfrom = 'info.testerdata@gmail.com';
                $addto = $emailapproval;
                $addtoalias = $employeename;
                $subject = strtoupper($employeename) . ' - VOUHCER DEPARTMENT ' . strtoupper($param['hideparam']);
                $message = $this->_templatemsg->htmlvoucherrequest($param);
                $this->_mail->setData()->setFrom('testerdev72@gmail.com');
                $this->_mail->setData()->setBodyHtml($message);
                $this->_mail->setData()->addTo('ahmadriadi.ti@gmail.com', 'Ahmad Riadi');
                $this->_mail->setData()->setSubject($subject);
                if ($this->_mail->setData()->send()) {
                    //echo 'succes send mail';
                    $this->updateStatusmail($param);
                } else {
                    //echo 'failed send mail';
                }
            }
        }
    }

    private function updateStatusmail($param) {
        $this->setting->_paramsql = 'update';
        $this->setting->_iddata = $param['voucher_id'];
        $this->setting->_param = array(
            "hideparam" => $param['hideparam'],
        );
        $result = $this->setting->executeSP();
        return $result;
    }

    private function getdataVoucherbyid($param) {
        $pt = $param['pt_id'];
        $project = $this->_project_id;
        $voucher_id = $param['voucher_id'];
        $department_id = $param['department_id'];

        $this->setting->_paramsql = 'read';
        $this->setting->_param = array(
            "hideparam" => 'read',
            "start" => 0,
            "limit" => 1,
            "project_id" => $project,
            "pt_id" => $pt,
            "department_id" => $department_id,
            "voucher_id" => $voucher_id,
        );
        $result = $this->setting->executeSP();
        if (!empty($result[2])) {
            $return = $result[2][0];
        } else {
            $return = null;
        }
        return $return;
    }

    public function VDApproveCreate($param) {
        $return['success'] = false;
        if (is_array($param) && count($param)) {
            try {
                $this->setting->_param = $param;
                $this->setting->_paramsql = 'create';
                $this->setting->_pt_id = $param['pt_id'];
                switch ($this->setting->_param['hideparam']) {
                    case 'create':
                        $result = $this->setting->executeSP();
                        if ($result[1] == 1) {
                            $valid = $result[2][0]['VALIDDATA'];
                        } else {
                            $valid = $result[1][0]['VALIDDATA'];
                        }
                        if ($valid == 'false') {
                            $counter = $result[2][0]['RECORD_TOTAL'];
                            $message = $result[3][0]['MSG'];
                            $idheader = 0;
                        } else {
                            $counter = $result[3][0]['RECORD_TOTAL'];
                            $message = $result[4][0]['MSG'];
                            $idheader = $result[5][0]['voucher_id'];
                            //$this->sendmaildata($param);
                        }
                        break;
                    default:
                        $result = null;
                        $valid = false;
                        $counter = 1;

                        $idheader = 0;
                        $message = 'data error';
                }
                $result['idheader'] = $idheader;
                $return = array(
                    "parameter" => $param['hideparam'],
                    "msg" => $message,
                    "success" => $valid,
                    "data" => $result,
                    "total" => $counter,
                );
            } catch (Exception $ex) {
                
            }
        }
        return $return;
    }

    public function VDApproveUpdate($param) {
        $return['success'] = false;
        if (is_array($param) && count($param)) {
            try {
                $this->setting->_param = $param;
                $this->setting->_paramsql = 'update';
                $this->setting->_pt_id = $param['pt_id'];
                $this->setting->_iddata = $param['voucher_id'];
                switch ($this->setting->_param['hideparam']) {
                    case 'update':
                        $result = $this->setting->executeSP();
                        $result['idheader'] = $result[4][0]['voucher_id'];
                        $valid = $result[1][0]['VALIDDATA'];
                        $counter = $result[2][0]['RECORD_TOTAL'];
                        $message = $result[3][0]['MSG'];
                        break;
                    case 'approve':
                        $this->sendmaildata($param);
                        $result = null;
                        $valid = false;
                        $counter = 1;
                        $idheader = 0;
                        $message = 'sending email approve';
                        break;
                    case 'unapprove':
                        $this->sendmaildata($param);
                        $result = null;
                        $valid = false;
                        $counter = 1;
                        $idheader = 0;
                        $message = 'sending email unapprove';
                        break;
                    default:
                        $result = null;
                        $valid = false;
                        $idheader = null;
                        $counter = 1;
                        $message = 'data error';
                }

                $return = array(
                    "parameter" => $param['hideparam'],
                    "msg" => $message,
                    "success" => $valid,
                    "data" => $result,
                    "total" => $counter,
                );
            } catch (Exception $ex) {
                
            }
        }
        return $return;
    }

    function VDApproveDelete($param = array()) {
        $return['success'] = false;
        if (is_array($param) && count($param)) {
            $key_name = 'voucher_id';
            $param[$key_name] = isset($param[$key_name]) ? $param[$key_name] : '';
            foreach ($param as $key => $val) {
                if (is_array($val)) {
                    $param[$key_name] .= $val[$key_name] . ',';
                }
            }
            try {
                $this->setting->_iddata = $param[$key_name];
                $this->setting->_paramsql = 'delete';
                $result = $this->setting->executeSP();
                $valid = $result[3][0]['VALIDDATA'];
                $counter = $result[4][0]['RECORD_TOTAL'];
                $message = $result[5][0]['MSG'];

                $return = array(
                    "success" => $valid,
                    "total" => $counter,
                    "msg" => $message,
                );
            } catch (Exception $e) {
                
            }
        }
        return $return;
    }

}
